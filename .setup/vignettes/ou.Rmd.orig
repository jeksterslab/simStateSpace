---
title: "The Ornstein–Uhlenbeck Model"
author: "Ivan Jacob Agaloos Pesigan"
date: "`r Sys.Date()`"
bibliography: "vignettes.bib"
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
nocite: |
  @RCoreTeam-2023
  @Ou-Hunter-Chow-2019
  @Chow-Losardo-Park-etal-2023
  @Uhlenbeck-Ornstein-1930
  @Chow-Ho-Hamaker-etal-2010
output:
  rmarkdown::html_vignette:
    toc: true
vignette: >
  %\VignetteIndexEntry{The Ornstein–Uhlenbeck Model}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.path = "fig-vignettes-ou-",
  fig.cap = "",
  fig.width = 11,
  fig.height = 8,
  fig.retina = 2,
  dpi = 300,
  comment = "#>"
)
```

## Model

The measurement model is given by

\begin{equation}
  \mathbf{y}_{i, t}
  =
  \boldsymbol{\nu}
  +
  \boldsymbol{\Lambda}
  \boldsymbol{\eta}_{i, t} 
  +
  \boldsymbol{\varepsilon}_{i, t},
  \quad
  \mathrm{with}
  \quad
  \boldsymbol{\varepsilon}_{i, t}
  \sim
  \mathcal{N}
  \left(
  \mathbf{0},
  \boldsymbol{\Theta}
  \right)
\end{equation}

where $\mathbf{y}_{i, t}$, $\boldsymbol{\eta}_{i, t}$,
and $\boldsymbol{\varepsilon}_{i, t}$
are random variables and $\boldsymbol{\nu}$,
$\boldsymbol{\Lambda}$,
and $\boldsymbol{\Theta}$ are model parameters.
$\mathbf{y}_{i, t}$ is a vector of observed random variables
at time $t$ and individual $i$,
$\boldsymbol{\eta}_{i, t}$ is a vector of latent random variables
at time $t$ and individual $i$,
and $\boldsymbol{\varepsilon}_{i, t}$
is a vector of random measurement errors
at time $t$ and individual $i$,
while $\boldsymbol{\nu}$ is a vector of intercept,
$\boldsymbol{\Lambda}$ is a matrix of factor loadings,
and $\boldsymbol{\Theta}$ is the covariance matrix of
$\boldsymbol{\varepsilon}$.

The dynamic structure is given by

\begin{equation}
  \mathrm{d} \boldsymbol{\eta}_{i, t}
  =
  \boldsymbol{\Phi}
  \left(
  \boldsymbol{\mu}
  -
  \boldsymbol{\eta}_{i, t}
  \right)
  \mathrm{d}t
  +
  \boldsymbol{\Sigma}^{\frac{1}{2}}
  \mathrm{d}
  \mathbf{W}_{i, t}
\end{equation}

where $\boldsymbol{\mu}$ is the long-term mean or equilibrium level,
$\boldsymbol{\Phi}$ is the rate of mean reversion,
determining how quickly the variable returns to its mean,
$\boldsymbol{\Sigma}$ is the matrix of volatility
or randomness in the process, and $\mathrm{d}\boldsymbol{W}$
is a Wiener process or Brownian motion,
which represents random fluctuations.

## Data Generation

### Notation

```{r}
#| echo = FALSE
production <- FALSE
if (production) {
  time <- 1000
  n <- 100
} else {
  time <- 1000
  n <- 5
}
time_ct <- seq(from = 0, to = 1000, by = 0.10)
time_var <- time_ct[
  which(time_ct %in% seq(from = 0, to = 1000, by = 1.00))
]
time <- length(time_ct)
set.seed(42)
delta_t <- 0.10
k <- p <- 3
iden <- diag(k)
null_vec <- rep(x = 0, times = k)
mu0 <- null_vec
sigma0 <- iden
mu <- null_vec
phi <- matrix(
  data = c(
    0.357,
    -0.771,
    0.450,
    0.0,
    0.511,
    -0.729,
    0,
    0,
    0.693
  ),
  nrow = k
)
beta_var1 <- as.matrix(
  Matrix::expm(
    -1 * phi
  )
)
psi <- iden
sigma <- iden
nu <- null_vec
lambda <- iden
theta <- 0.5 * iden
```

Let $t = `r time`$ be the number of time points and $n = `r n`$ be the number of individuals.

Let the measurement model intecept vector $\boldsymbol{\nu}$ be given by

\begin{equation}
\boldsymbol{\nu}
=
\left(
\begin{array}{c}
  `r nu[1]` \\
  `r nu[2]` \\
  `r nu[3]` \\
\end{array}
\right) .
\end{equation}

Let the factor loadings matrix $\boldsymbol{\Lambda}$ be given by

\begin{equation}
\boldsymbol{\Lambda}
=
\left(
\begin{array}{ccc}
  `r lambda[1, 1]` & `r lambda[1, 2]` & `r lambda[1, 3]` \\
  `r lambda[2, 1]` & `r lambda[2, 2]` & `r lambda[2, 3]` \\
  `r lambda[3, 1]` & `r lambda[3, 2]` & `r lambda[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let the measurement error covariance matrix $\boldsymbol{\Theta}$ be given by

\begin{equation}
\boldsymbol{\Theta}
=
\left(
\begin{array}{ccc}
  `r theta[1, 1]` & `r theta[1, 2]` & `r theta[1, 3]` \\
  `r theta[2, 1]` & `r theta[2, 2]` & `r theta[2, 3]` \\
  `r theta[3, 1]` & `r theta[3, 2]` & `r theta[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let the initial condition
$\boldsymbol{\eta}_{0}$
be given by

\begin{equation}
\boldsymbol{\eta}_{0} \sim \mathcal{N} \left( \boldsymbol{\mu}_{\boldsymbol{\eta} \mid 0}, \boldsymbol{\Sigma}_{\boldsymbol{\eta} \mid 0} \right)
\end{equation}

\begin{equation}
\boldsymbol{\mu}_{\boldsymbol{\eta} \mid 0}
=
\left(
\begin{array}{c}
  `r mu0[1]` \\
  `r mu0[2]` \\
  `r mu0[3]` \\
\end{array}
\right)
\end{equation}

\begin{equation}
\boldsymbol{\Sigma}_{\boldsymbol{\eta} \mid 0}
=
\left(
\begin{array}{ccc}
  `r sigma0[1, 1]` & `r sigma0[1, 2]` & `r sigma0[1, 3]` \\
  `r sigma0[2, 1]` & `r sigma0[2, 2]` & `r sigma0[2, 3]` \\
  `r sigma0[3, 1]` & `r sigma0[3, 2]` & `r sigma0[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let the long-term mean vector $\boldsymbol{\mu}$ be given by

\begin{equation}
\boldsymbol{\mu}
=
\left(
\begin{array}{c}
  `r mu[1]` \\
  `r mu[2]` \\
  `r mu[3]` \\
\end{array}
\right) .
\end{equation}

Let the rate of mean reversion matrix $\boldsymbol{\Phi}$ be given by

\begin{equation}
\boldsymbol{\Phi}
=
\left(
\begin{array}{ccc}
  `r phi[1, 1]` & `r phi[1, 2]` & `r phi[1, 3]` \\
  `r phi[2, 1]` & `r phi[2, 2]` & `r phi[2, 3]` \\
  `r phi[3, 1]` & `r phi[3, 2]` & `r phi[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let the dynamic process noise covariance matrix $\boldsymbol{\Sigma}$ be given by

\begin{equation}
\boldsymbol{\Sigma}
=
\left(
\begin{array}{ccc}
  `r sigma[1, 1]` & `r sigma[1, 2]` & `r sigma[1, 3]` \\
  `r sigma[2, 1]` & `r sigma[2, 2]` & `r sigma[2, 3]` \\
  `r sigma[3, 1]` & `r sigma[3, 2]` & `r sigma[3, 3]` \\
\end{array}
\right) .
\end{equation}

Let $\Delta_{t} = `r delta_t`$.

### R Function Arguments

```{r}
n
time
delta_t
mu0
sigma0
mu
phi
sigma
nu
lambda
theta
```

### Using the SimSSMOUFixed Function from the simStateSpace Package to Simulate Data

```{r}
library(simStateSpace)
sim <- SimSSMOUFixed(
  n = n,
  mu0 = mu0,
  sigma0 = sigma0,
  mu = mu,
  phi = phi,
  sigma = sigma,
  nu = nu,
  lambda = lambda,
  theta = theta,
  delta_t = delta_t,
  time = time,
  burn_in = 0
)
data <- as.data.frame(sim)
head(data)
plot(sim)
```

## Model Fitting

### Prepare Data

```{r}
dynr_data <- dynr::dynr.data(
  dataframe = data,
  id = "id",
  time = "time",
  observed = c("y1", "y2", "y3")
)
```

### Prepare Initial Condition

```{r}
dynr_initial <- dynr::prep.initial(
  values.inistate = mu0,
  params.inistate = c("mu0_1", "mu0_2", "mu0_3"),
  values.inicov = sigma0,
  params.inicov = matrix(
    data = c(
      "sigma0_11", "sigma0_12", "sigma0_13",
      "sigma0_12", "sigma0_22", "sigma0_23",
      "sigma0_13", "sigma0_23", "sigma0_33"
    ),
    nrow = 3
  )
)
```

### Prepare Measurement Model

```{r}
dynr_measurement <- dynr::prep.measurement(
  values.load = diag(3),
  params.load = matrix(data = "fixed", nrow = 3, ncol = 3),
  state.names = c("eta_1", "eta_2", "eta_3"),
  obs.names = c("y1", "y2", "y3")
)
```

### Prepare Dynamic Process

```{r}
dynr_dynamics <- dynr::prep.formulaDynamics(
  formula = list(  
    eta_1 ~ phi_11 * (mu_1 - eta_1) + phi_12 * (mu_2 - eta_2) + phi_13 * (mu_3 - eta_3),
    eta_2 ~ phi_21 * (mu_1 - eta_1) + phi_22 * (mu_2 - eta_2) + phi_23 * (mu_3 - eta_3),
    eta_3 ~ phi_31 * (mu_1 - eta_1) + phi_32 * (mu_2 - eta_2) + phi_33 * (mu_3 - eta_3)
  ),
  startval = c(
    mu_1 = 0, mu_2 = 0, mu_3 = 0,
    phi_11 = 0, phi_12 = 0, phi_13 = 0,
    phi_21 = 0, phi_22 = 0, phi_23 = 0,
    phi_31 = 0, phi_32 = 0, phi_33 = 0
  ),
  isContinuousTime = TRUE
)
```

### Prepare Process Noise

```{r}
dynr_noise <- dynr::prep.noise(
  values.latent = sigma,
  params.latent = matrix(
    data = c(
      "sigma_11", "sigma_12", "sigma_13",
      "sigma_12", "sigma_22", "sigma_23",
      "sigma_13", "sigma_23", "sigma_33"
    ),
    nrow = 3
  ),
  values.observed = theta,
  params.observed = matrix(
    data = c(
      "theta_11", "fixed", "fixed",
      "fixed", "theta_22", "fixed",
      "fixed", "fixed", "theta_33"
    ),
    nrow = 3
  )
)
```

### Prepare the Model

```{r}
model <- dynr::dynr.model(
  data = dynr_data,
  initial = dynr_initial,
  measurement = dynr_measurement,
  dynamics = dynr_dynamics,
  noise = dynr_noise,
  outfile = "ou.c"
)
```

Add lower and upper bounds to aid in the optimization.

```{r}
model$lb[
  c(
    "phi_11",
    "phi_12",
    "phi_13",
    "phi_21",
    "phi_22",
    "phi_23",
    "phi_31",
    "phi_32",
    "phi_33"
  )
] <- -1.5
model$ub[
  c(
    "phi_11",
    "phi_12",
    "phi_13",
    "phi_21",
    "phi_22",
    "phi_23",
    "phi_31",
    "phi_32",
    "phi_33"
  )
] <- +1.5
model$lb[
  c(
    "sigma_11",
    "sigma_22",
    "sigma_33",
    "theta_11",
    "theta_22",
    "theta_33"
  )
] <- .Machine$double.xmin
```

```{r}
#| echo = FALSE
dynr::plotFormula(
  dynrModel = model,
  ParameterAs = model$"param.names",
  printDyn = TRUE,
  printMeas = TRUE
)
```

### Fit the Model

```{r}
results <- dynr::dynr.cook(
  model,
  debug_flag = TRUE,
  verbose = FALSE
)
```

## Summary

```{r}
summary(results)
```

```{r}
#| echo = FALSE
estimates <- coef(results)
estimates_cov <- vcov(results)
mu0_hat <- unname(
  estimates[
    c(
      "mu0_1",
      "mu0_2",
      "mu0_3"
    )
  ]
)
unname(mu0_hat)
sigma0_hat <- matrix(
  data = estimates[
    c(
      "sigma0_11",
      "sigma0_12",
      "sigma0_13",
      "sigma0_12",
      "sigma0_22",
      "sigma0_23",
      "sigma0_13",
      "sigma0_23",
      "sigma0_33"
    )
  ],
  nrow = 3
)
mu_hat <- unname(
  estimates[
    c(
      "mu_1",
      "mu_2",
      "mu_3"
    )
  ]
)
phi_hat <- matrix(
  data = estimates[
    c(
      "phi_11",
      "phi_21",
      "phi_31",
      "phi_12",
      "phi_22",
      "phi_32",
      "phi_13",
      "phi_23",
      "phi_33"
    )
  ],
  nrow = 3
)
sigma_hat <- matrix(
  data = estimates[
    c(
      "sigma_11",
      "sigma_12",
      "sigma_13",
      "sigma_12",
      "sigma_22",
      "sigma_23",
      "sigma_13",
      "sigma_23",
      "sigma_33"
    )
  ],
  nrow = 3
)
```

### Parameter Estimates

```{r}
mu_hat
phi_hat
sigma_hat
mu0_hat
sigma0_hat
beta_var1_hat <- as.matrix(
  Matrix::expm(-1 * phi_hat)
)
beta_var1_hat
```

## References
