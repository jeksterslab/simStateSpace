// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// LinSDE2SSM
Rcpp::List LinSDE2SSM(const arma::vec& iota, const arma::mat& phi, const arma::mat& sigma_l, const double delta_t);
RcppExport SEXP _simStateSpace_LinSDE2SSM(SEXP iotaSEXP, SEXP phiSEXP, SEXP sigma_lSEXP, SEXP delta_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type iota(iotaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_l(sigma_lSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    rcpp_result_gen = Rcpp::wrap(LinSDE2SSM(iota, phi, sigma_l, delta_t));
    return rcpp_result_gen;
END_RCPP
}
// SimBetaN
Rcpp::List SimBetaN(const arma::uword& n, const arma::mat& beta, const arma::mat& vcov_beta_vec_l);
RcppExport SEXP _simStateSpace_SimBetaN(SEXP nSEXP, SEXP betaSEXP, SEXP vcov_beta_vec_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vcov_beta_vec_l(vcov_beta_vec_lSEXP);
    rcpp_result_gen = Rcpp::wrap(SimBetaN(n, beta, vcov_beta_vec_l));
    return rcpp_result_gen;
END_RCPP
}
// SimPhiN
Rcpp::List SimPhiN(const arma::uword& n, const arma::mat& phi, const arma::mat& vcov_phi_vec_l);
RcppExport SEXP _simStateSpace_SimPhiN(SEXP nSEXP, SEXP phiSEXP, SEXP vcov_phi_vec_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vcov_phi_vec_l(vcov_phi_vec_lSEXP);
    rcpp_result_gen = Rcpp::wrap(SimPhiN(n, phi, vcov_phi_vec_l));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMFixed0
Rcpp::List SimSSMFixed0(const arma::uword& n, const arma::uword& time, const double delta_t, const arma::vec& mu0, const arma::mat& sigma0_l, const arma::vec& alpha, const arma::mat& beta, const arma::mat& psi_l, const arma::vec& nu, const arma::mat& lambda, const arma::mat& theta_l);
RcppExport SEXP _simStateSpace_SimSSMFixed0(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta_l(theta_lSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMFixed0(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, nu, lambda, theta_l));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMFixed1
Rcpp::List SimSSMFixed1(const arma::uword& n, const arma::uword& time, const double delta_t, const arma::vec& mu0, const arma::mat& sigma0_l, const arma::vec& alpha, const arma::mat& beta, const arma::mat& psi_l, const arma::vec& nu, const arma::mat& lambda, const arma::mat& theta_l, const Rcpp::List& x, const arma::mat& gamma);
RcppExport SEXP _simStateSpace_SimSSMFixed1(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP, SEXP xSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta_l(theta_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMFixed1(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, nu, lambda, theta_l, x, gamma));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMFixed2
Rcpp::List SimSSMFixed2(const arma::uword& n, const arma::uword& time, const double delta_t, const arma::vec& mu0, const arma::mat& sigma0_l, const arma::vec& alpha, const arma::mat& beta, const arma::mat& psi_l, const arma::vec& nu, const arma::mat& lambda, const arma::mat& theta_l, const Rcpp::List& x, const arma::mat& gamma, const arma::mat& kappa);
RcppExport SEXP _simStateSpace_SimSSMFixed2(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP, SEXP xSEXP, SEXP gammaSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta_l(theta_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMFixed2(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, nu, lambda, theta_l, x, gamma, kappa));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMIVary0
Rcpp::List SimSSMIVary0(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& alpha, const Rcpp::List& beta, const Rcpp::List& psi_l, const Rcpp::List& nu, const Rcpp::List& lambda, const Rcpp::List& theta_l);
RcppExport SEXP _simStateSpace_SimSSMIVary0(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type theta_l(theta_lSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMIVary0(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, nu, lambda, theta_l));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMIVary1
Rcpp::List SimSSMIVary1(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& alpha, const Rcpp::List& beta, const Rcpp::List& psi_l, const Rcpp::List& nu, const Rcpp::List& lambda, const Rcpp::List& theta_l, const Rcpp::List& x, const Rcpp::List& gamma);
RcppExport SEXP _simStateSpace_SimSSMIVary1(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP, SEXP xSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type theta_l(theta_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMIVary1(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, nu, lambda, theta_l, x, gamma));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMIVary2
Rcpp::List SimSSMIVary2(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& alpha, const Rcpp::List& beta, const Rcpp::List& psi_l, const Rcpp::List& nu, const Rcpp::List& lambda, const Rcpp::List& theta_l, const Rcpp::List& x, const Rcpp::List& gamma, const Rcpp::List& kappa);
RcppExport SEXP _simStateSpace_SimSSMIVary2(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP, SEXP xSEXP, SEXP gammaSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type theta_l(theta_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMIVary2(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, nu, lambda, theta_l, x, gamma, kappa));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMLatFixed0
Rcpp::List SimSSMLatFixed0(const arma::uword& n, const arma::uword& time, const double delta_t, const arma::vec& mu0, const arma::mat& sigma0_l, const arma::vec& alpha, const arma::mat& beta, const arma::mat& psi_l);
RcppExport SEXP _simStateSpace_SimSSMLatFixed0(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi_l(psi_lSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMLatFixed0(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMLatFixed1
Rcpp::List SimSSMLatFixed1(const arma::uword& n, const arma::uword& time, const double delta_t, const arma::vec& mu0, const arma::mat& sigma0_l, const arma::vec& alpha, const arma::mat& beta, const arma::mat& psi_l, const Rcpp::List& x, const arma::mat& gamma);
RcppExport SEXP _simStateSpace_SimSSMLatFixed1(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP xSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMLatFixed1(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, x, gamma));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMLatIVary0
Rcpp::List SimSSMLatIVary0(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& alpha, const Rcpp::List& beta, const Rcpp::List& psi_l);
RcppExport SEXP _simStateSpace_SimSSMLatIVary0(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psi_l(psi_lSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMLatIVary0(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMLatIVary1
Rcpp::List SimSSMLatIVary1(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& alpha, const Rcpp::List& beta, const Rcpp::List& psi_l, const Rcpp::List& x, const Rcpp::List& gamma);
RcppExport SEXP _simStateSpace_SimSSMLatIVary1(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP psi_lSEXP, SEXP xSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type psi_l(psi_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMLatIVary1(n, time, delta_t, mu0, sigma0_l, alpha, beta, psi_l, x, gamma));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMLinSDEIVary0
Rcpp::List SimSSMLinSDEIVary0(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& iota, const Rcpp::List& phi, const Rcpp::List& sigma_l, const Rcpp::List& nu, const Rcpp::List& lambda, const Rcpp::List& theta_l, const bool ou);
RcppExport SEXP _simStateSpace_SimSSMLinSDEIVary0(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP iotaSEXP, SEXP phiSEXP, SEXP sigma_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP, SEXP ouSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type iota(iotaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma_l(sigma_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type theta_l(theta_lSEXP);
    Rcpp::traits::input_parameter< const bool >::type ou(ouSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMLinSDEIVary0(n, time, delta_t, mu0, sigma0_l, iota, phi, sigma_l, nu, lambda, theta_l, ou));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMLinSDEIVary1
Rcpp::List SimSSMLinSDEIVary1(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& iota, const Rcpp::List& phi, const Rcpp::List& sigma_l, const Rcpp::List& nu, const Rcpp::List& lambda, const Rcpp::List& theta_l, const Rcpp::List& x, const Rcpp::List& gamma, const bool ou);
RcppExport SEXP _simStateSpace_SimSSMLinSDEIVary1(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP iotaSEXP, SEXP phiSEXP, SEXP sigma_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP, SEXP xSEXP, SEXP gammaSEXP, SEXP ouSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type iota(iotaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma_l(sigma_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type theta_l(theta_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const bool >::type ou(ouSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMLinSDEIVary1(n, time, delta_t, mu0, sigma0_l, iota, phi, sigma_l, nu, lambda, theta_l, x, gamma, ou));
    return rcpp_result_gen;
END_RCPP
}
// SimSSMLinSDEIVary2
Rcpp::List SimSSMLinSDEIVary2(const arma::uword& n, const arma::uword& time, const double delta_t, const Rcpp::List& mu0, const Rcpp::List& sigma0_l, const Rcpp::List& iota, const Rcpp::List& phi, const Rcpp::List& sigma_l, const Rcpp::List& nu, const Rcpp::List& lambda, const Rcpp::List& theta_l, const Rcpp::List& x, const Rcpp::List& gamma, const Rcpp::List& kappa, const bool ou);
RcppExport SEXP _simStateSpace_SimSSMLinSDEIVary2(SEXP nSEXP, SEXP timeSEXP, SEXP delta_tSEXP, SEXP mu0SEXP, SEXP sigma0_lSEXP, SEXP iotaSEXP, SEXP phiSEXP, SEXP sigma_lSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP theta_lSEXP, SEXP xSEXP, SEXP gammaSEXP, SEXP kappaSEXP, SEXP ouSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uword& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type delta_t(delta_tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma0_l(sigma0_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type iota(iotaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma_l(sigma_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type theta_l(theta_lSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const bool >::type ou(ouSEXP);
    rcpp_result_gen = Rcpp::wrap(SimSSMLinSDEIVary2(n, time, delta_t, mu0, sigma0_l, iota, phi, sigma_l, nu, lambda, theta_l, x, gamma, kappa, ou));
    return rcpp_result_gen;
END_RCPP
}
// SolveSyl
arma::mat SolveSyl(arma::mat A, arma::mat B, arma::mat C);
RcppExport SEXP _simStateSpace_SolveSyl(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(SolveSyl(A, B, C));
    return rcpp_result_gen;
END_RCPP
}
// TestPhi
bool TestPhi(const arma::mat& phi);
RcppExport SEXP _simStateSpace_TestPhi(SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(TestPhi(phi));
    return rcpp_result_gen;
END_RCPP
}
// TestStability
bool TestStability(const arma::mat& x);
RcppExport SEXP _simStateSpace_TestStability(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(TestStability(x));
    return rcpp_result_gen;
END_RCPP
}
// TestStationarity
bool TestStationarity(const arma::mat& x);
RcppExport SEXP _simStateSpace_TestStationarity(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(TestStationarity(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simStateSpace_LinSDE2SSM", (DL_FUNC) &_simStateSpace_LinSDE2SSM, 4},
    {"_simStateSpace_SimBetaN", (DL_FUNC) &_simStateSpace_SimBetaN, 3},
    {"_simStateSpace_SimPhiN", (DL_FUNC) &_simStateSpace_SimPhiN, 3},
    {"_simStateSpace_SimSSMFixed0", (DL_FUNC) &_simStateSpace_SimSSMFixed0, 11},
    {"_simStateSpace_SimSSMFixed1", (DL_FUNC) &_simStateSpace_SimSSMFixed1, 13},
    {"_simStateSpace_SimSSMFixed2", (DL_FUNC) &_simStateSpace_SimSSMFixed2, 14},
    {"_simStateSpace_SimSSMIVary0", (DL_FUNC) &_simStateSpace_SimSSMIVary0, 11},
    {"_simStateSpace_SimSSMIVary1", (DL_FUNC) &_simStateSpace_SimSSMIVary1, 13},
    {"_simStateSpace_SimSSMIVary2", (DL_FUNC) &_simStateSpace_SimSSMIVary2, 14},
    {"_simStateSpace_SimSSMLatFixed0", (DL_FUNC) &_simStateSpace_SimSSMLatFixed0, 8},
    {"_simStateSpace_SimSSMLatFixed1", (DL_FUNC) &_simStateSpace_SimSSMLatFixed1, 10},
    {"_simStateSpace_SimSSMLatIVary0", (DL_FUNC) &_simStateSpace_SimSSMLatIVary0, 8},
    {"_simStateSpace_SimSSMLatIVary1", (DL_FUNC) &_simStateSpace_SimSSMLatIVary1, 10},
    {"_simStateSpace_SimSSMLinSDEIVary0", (DL_FUNC) &_simStateSpace_SimSSMLinSDEIVary0, 12},
    {"_simStateSpace_SimSSMLinSDEIVary1", (DL_FUNC) &_simStateSpace_SimSSMLinSDEIVary1, 14},
    {"_simStateSpace_SimSSMLinSDEIVary2", (DL_FUNC) &_simStateSpace_SimSSMLinSDEIVary2, 15},
    {"_simStateSpace_SolveSyl", (DL_FUNC) &_simStateSpace_SolveSyl, 3},
    {"_simStateSpace_TestPhi", (DL_FUNC) &_simStateSpace_TestPhi, 1},
    {"_simStateSpace_TestStability", (DL_FUNC) &_simStateSpace_TestStability, 1},
    {"_simStateSpace_TestStationarity", (DL_FUNC) &_simStateSpace_TestStationarity, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_simStateSpace(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
